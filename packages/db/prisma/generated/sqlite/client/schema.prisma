generator client {
  provider        = "prisma-client-js"
  output          = "../generated/sqlite/client"
  previewFeatures = ["prismaSchemaFolder", "fullTextIndex", "fullTextSearch", "postgresqlExtensions", "relationJoins", "nativeDistinct"]
}

generator zod {
  provider = "pnpm exec zod-prisma-types"
  output   = "../generated/sqlite/zod"
}

datasource db {
  provider = "sqlite"
  url      = env("SL_DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Integration {
  id             String   @id @default(cuid())
  name           String   @unique
  type           String   @default("REALTIME") // ENUM THAT IS EITHER "REALTIME" OR "SUMMARY"
  url            String
  imageUrl       String?
  widgetsEnabled Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  widgets Widget[]

  @@index(name)
  @@index(type)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Widget {
  id     String @id @default(cuid())
  slug   String @unique
  layout String @default("{}") // JSON

  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String

  @@index(slug)
}
